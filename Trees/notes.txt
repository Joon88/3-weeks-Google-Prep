* There is only a single BST possible for a given preorder or postorder traversal

* Anything done in preorder can be done with postorder, just the other way around
e.g. preorder - 1st elt of the arr is root, postorder - last elt of the arr is root

* when the graph in question is also a tree, and the initial vertex for DFS is the
tree's root then DFS and a pre-order traversal are equivalent.

Algos :
* Narrowing bound algorithm

Problems :
* https://www.geeksforgeeks.org/check-if-a-given-array-can-represent-preorder-traversal-of-binary-search-tree/
 (see below Problem Number 7)

Iterative ways to find Preorder/Postorder/Inorder traversals of a binary tree :
(Follow 1st 3 videos of Tech Dose)
1. Pre-order (1 stack reqd) : Start with the root in the stack. At every step pop x from stack, print it,
and push to stack right(x) followed by left(x) (if they are non-null). Continue unless stack is empty.

2. In-order (1 stack reqd) : With current set to root, keep pushing current in stack unless current == null,
if current is null, pop from stack and print x, then set current = right(x). Continue this unless stack is empty.

3. Post-order (2 stacks reqd) : start with root in stack 1, pop x from stack 1, push x to stack 2, and push
left(x) and right(x) to stack 1. Continue this unless stack 1 is empty. Finally when we pop elts from stack 2
we get everything is Post-order manner.


* Given inorder and preorder OR inorder and postorder traversal of a binary tree, we can form the binary tree.
This is because, inorder gives us the left and right subtree nodes for a root, and preorder/postorder give
us the root of that subtree. Thus, without inorder we can't form the binary tree. NOTE here we are talking just
about binary tree not BST.
e.g. for BST, we can construct the tree with just the preorder array (https://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/)


Important Problems :

1. Binary tree right side view | LC-199 (https://leetcode.com/problems/binary-tree-right-side-view/)
Soln - Same solution also for left side view. This can also be solved using BFS.

2. Binary Tree from Inorder and Preorder | LC-105 (https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)
Soln - The solution suggested in the Solutions section of the LC question takes advantage of the fact
that the nodes of the tree are created in the same sequence as the pre-order, so we can utilise that
sequence and only map the inorder one, leading to O(n) complexity.

3. Binary Tree from Inorder and Postorder | LC-106 (https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)
Soln - Here I have implemented the optimisation of the postorder sequence, and only mapped the inorder
sequence, as discussed in the question above too. You should follow this approach in the above problem too.

4. Validate BST | LC-98 (https://leetcode.com/problems/validate-binary-search-tree/)
Soln - Kind of easy except one scenario in this question i.e. the value of a node can be Integer.MIN_VALUE
or Integer.MAX_VALUE. This disrupts the < min and > max false condition check. Also the criteria for a BST
asked in this question is left < root < right. No left <= root.

5. Diameter of binary tree | LC-543 (https://leetcode.com/problems/diameter-of-binary-tree/)
Soln - Easy problem

6. Construct BST from pre-order | LC-1008 (https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/)
Soln - Somewhat similar to Binary Tree from Inorder and preorder. Gave me a hard time due to lack of attention.
Please retry.
Note : Whenever we are using range checks in tree question, always ensure, you check the range conditions first
and then only think about creating the nodes. Don't create node first and then check range conditions for next node.

7. Validate that a preorder sequence is of a BST | (https://www.interviewbit.com/problems/valid-bst-from-preorder/)
Soln - Very Important. Can be done using O(n^2) easily, but stack helps achieve O(n) time. Also, one important
observation is that, BST has many scopes of utilising Stacks as its just number comparison. Also, whenever we have
2 nested loops (j inside i), with j as a function of i, it's an indication that Stack might be applicable here.

8. Binary Tree maximum path sum | LC-124 (https://leetcode.com/problems/binary-tree-maximum-path-sum/)
Soln - Very good question, saw it in one exponent interview video too. And solved it by my own in one shot.
The key is to imagine all the different ways a node can be in the max path, and take actions accordingly.

9. Cousins in binary tree | LC-993 (https://leetcode.com/problems/cousins-in-binary-tree/)
Soln - Easy but took time for me.

10. Invert a binary tree | LC-226 (https://leetcode.com/problems/invert-binary-tree/)
Soln - Easy, just have to observe the example carefully.

11. Count complete binary tree nodes | LC-222 (https://leetcode.com/problems/count-complete-tree-nodes/)
Soln - Very interesting.

12. Sum root to leaf numbers | LC-129 (https://leetcode.com/problems/sum-root-to-leaf-numbers/)
Soln - Pretty straight forward.

13. Vertical order traversal of binary tree | LC-987 (https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/)
Soln - HARD. Great implementation of TreeMap and PQ. Must do.

14. Lowest Common Ancestor | LC-236 (https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/)
Soln - First think by yourself. Its also solved in the Algorithms/Trees repo.

15. Count good nodes in a binary tree | LC-1448 (https://leetcode.com/problems/count-good-nodes-in-binary-tree/)
Soln - Solved by my own :)

16. Serialise/Deserialise Binary tree | LC-297 (https://leetcode.com/problems/serialize-and-deserialize-binary-tree/)
Soln - Used Preorder traversal with null chars (X) in it. Can also be done using level order traversal.

17. LC-230 (https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/)
Soln - Very easy
