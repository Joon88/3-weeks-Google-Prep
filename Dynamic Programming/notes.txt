Problems based on recursion followed by DP :

NOTE : Sometime it's a bit difficult to go directly to bottom up DP, so memoization
serves best for those scenarios.
During bottom up DP, when it looks like a 2D dp can be reduced to 1D DP or just 2 or 3
1D DPs, do it, but keep in mind to cover all the scenarios verbosely i.e. set the base 
cases proactively, and do not leave for the default values to take effect. Also in the 
condition checks, check for all conditions exclusive, even those that are for the left 
over else case, and mark them exclusively.

1. Interleaving String | LC-97 (https://leetcode.com/problems/interleaving-string/)
Soln - Purely based on recursive thinking and then optimising, as repeating subproblems
are present.
Optimization : Using 2-D and 1-D bottom up DP (much better)

2. Longest Common Subsequence (LCS) | LC-1143 (https://leetcode.com/problems/longest-common-subsequence/)
Soln - Pure recursion followed by memoization or a bottom up approach. O(mn) time and space
To find the LCS string from the 2-D DP table :
```
private String findLCS(int[][] dp, String s1, String s2) {
        StringBuilder sb = new StringBuilder();
        int i = dp.length-1;
        int j = dp[0].length-1;
        while(dp[i][j] != 0) {
            if(s1.charAt(i-1) == s2.charAt(j-1)){
                i--; j--;
                sb.append(s1.charAt(i));
            } else if(dp[i-1][j] == dp[i][j])
                i--;
            else if(dp[i][j-1] == dp[i][j])
                j--;
        }
        return sb.reverse().toString();
    }
```

3. Shortest Common Supersequence (SCS) | LC-1092 (https://leetcode.com/problems/shortest-common-supersequence/)
Soln - Uses the LCS concept. The SCS in worst case will be s1+s2 (when there's nothing common among them).
And in best case will be the longest(s1, s2), when one is a subsequence of another. So, the SCS will
definitely have the elements in the LCS once.

4. Longest Repeating Subsequence (https://www.interviewbit.com/problems/repeating-subsequence/)
Soln - Based on LCS, this is very interesting. So, the heading is somewhat confusing, and I could
not understand the question in the first place. So, repeating subsequence means, a subsequence
than occurs twice in the string. Now, for a subsequence to occur twice, with no characters being
shared by the subsequences. There must be more than one occurrence of a character for it to be in
the longest repeating subsequence.
Now while applying the LCS concept here, we consider the same string in both the row and column of
the 2-D DP grid. And try to find the LCS (which by normal LCS rules will be the same string itself),
by not counting a character as part of the LCS if i == j i.e. the index of the char is same in both
the strings (in this case, both string signify the same input string). This is because, for any char
occurs just once in the string, i == j always. And that's what we want to exclude.

5. Wildcard Matching | LC-44 (https://leetcode.com/problems/wildcard-matching/)
Soln - Wildcards * & ? are in consideration. If it would only have been *, then just finding if pattern
is a subsequence of given string would have sufficed, but with this wildcard chars, I had to start
thinking recursively from the beginning, keeping in mind the LCS recursive equations. Really happy
that I did this myself, without referring to any tutorials :), coz its LC-Hard.

6. Minimum Edit Distance | LC-72 (https://leetcode.com/problems/edit-distance/)
Soln - Recursive equation commented in the code.

7. Longest common substring | LC-718 (https://leetcode.com/problems/maximum-length-of-repeated-subarray/)
Soln - It's a subarray and not subsequence, the mentioned example is with integers, but with string too,
it would be kind of similar. Note, whenever the letters/numbers at m and n do not match, we simply put it
as 0, and not carry forward the max substring length found so far, as this value might be treated as a
diagonal predecessor for an upcoming matching letter/number.
