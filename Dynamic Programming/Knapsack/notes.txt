*** In any memoization approach, always check the base cases first without any
mention or check of the memo, just like in normal recursive equation without
memoization. Once the base cases are handled, then check if the memo already
has the required element. And also set the memo in the successive condition checks.
In short, base cases, should not have any memo involved.

Problems based on 0/1 Knapsack or SubsetSum problem :

NOTE : All these algos run only if input array has only +ve integers.
       Even for input arrays with 0, we need some slight modifications
       in some of the algos( mentioned in the respective algo code file )

       In case input contains -ve numbers, we need to handle it in a
       different way, look at negativeKnapsack.java

1. Minimum subset sum difference
Soln - explained in the code

2. Number of subsets with given difference
Soln - Lets say the given difference is diff = subsetSum1 - subsetSum2
Now we need to find all possible subset1 and subset2 pairs while difference
would be equal to diff.

Let's see if we can reduce this problem to a known one.
sum = subsetSum1 + subsetSum2
diff = subsetSum1 - subsetSum2
     = subsetSum1 - (sum - subsetSum1)
     = 2*subsetSum1 - sum
subsetSum1 = (diff + sum)/2 which is constant

So, finally the problem boils down to finding number of subsets with the sum
subsetSum1 i.e. the subsetCount.java code

3. Target Sum | LC-494 (https://leetcode.com/problems/target-sum/)
Soln - This problem boils down to dividing the given array into two subsets,
one for numbers with +ve sign and another for numbers with -ve sign, such
that the difference of their sums is equal to target. And we need to return
the number of ways such division can be done. Which is basically the problem
2 (Number of subsets with given difference) above.

4. Coin change | LC-322 (https://leetcode.com/problems/coin-change/)
Soln - Unbounded knapsack problem. Can pick an item more than once, thus in
1D bottom up DP, we go from left to right.

5. Coin Change 2 | LC-518 (https://leetcode.com/problems/coin-change-2/)
Soln - Unbounded knapsack problem, with similar logic as subsetCount or
number of ways algo.
The typical recursive equation for unbounded knapsack problems :
f(n, sum) ---> f(n-1, sum)                      ; arr[n] > sum
          ---> f(n-1, sum) + f(n, sum - arr[n]) ; n > 0 && sum > 0 i.e. (<leave it> OR <pick it and stay there>)
          ---> 1                                ; sum = 0
          ---> 0                                ; n = 0 && sum != 0

The f(n, sum - arr[n]) in the second equation is the only difference,
this means we are picking the element and not moving forward, so that
multiple instances of the same element can be picked. For O1 knapsack
it's f(n-1, sum - arr[n]), because once we pick it, we move forward.

6. Rod Cutting Problem (https://practice.geeksforgeeks.org/problems/rod-cutting0840/1#)
Soln - Same logic as unbounded knapsack.
(Took time while doing it first time, practice once again)

7. Minimum operations to reduce X to 0 | LC-1658 (https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/)
Soln - Not able to solve, pls revisit. Recursive with memoization gives TLE. Done using prefixArraySum technique,
as per Tech Dose video.

// Sample for for sliding windows (finding the max subarray length that sums to be targetSum)
// sliding windows are good for +ve integer questions
// for -ve integer questions, maintaining a prefixArraySumMap is easier as shown in question 7 above
int beg = 0;
int maxWindowLength = 0;
int currWindowSize = 0;
for(int end = 0; end < nums.length; end++) {
     currWindowSize += nums[end];

     while(currWindowSize > targetSum) {
          currWindowSize -= nums[beg];
          beg++;
     }
     if(currWindowSize == targetSum) {
          maxWindowLength = Math.max(maxWindowLength, end-beg+1);
     }
}
return maxWindowLength;